// This file was generated by gir (24767f3+) from gir-files (???)
// DO NOT EDIT

use Error;
use PtyFlags;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Pty(Object<ffi::VtePty>);

    match fn {
        get_type => || ffi::vte_pty_get_type(),
    }
}

impl Pty {
    //pub fn new_foreign_sync(fd: i32, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Pty, Error> {
    //    unsafe { TODO: call ffi::vte_pty_new_foreign_sync() }
    //}

    //pub fn new_sync(flags: PtyFlags, cancellable: /*Ignored*/Option<&gio::Cancellable>) -> Result<Pty, Error> {
    //    unsafe { TODO: call ffi::vte_pty_new_sync() }
    //}

    pub fn child_setup(&self) {
        unsafe {
            ffi::vte_pty_child_setup(self.to_glib_none().0);
        }
    }

    pub fn close(&self) {
        unsafe {
            ffi::vte_pty_close(self.to_glib_none().0);
        }
    }

    pub fn get_fd(&self) -> i32 {
        unsafe {
            ffi::vte_pty_get_fd(self.to_glib_none().0)
        }
    }

    pub fn get_size(&self) -> Result<(i32, i32), Error> {
        unsafe {
            let mut rows = mem::uninitialized();
            let mut columns = mem::uninitialized();
            let mut error = ptr::null_mut();
            let _ = ffi::vte_pty_get_size(self.to_glib_none().0, &mut rows, &mut columns, &mut error);
            if error.is_null() { Ok((rows, columns)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_size(&self, rows: i32, columns: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::vte_pty_set_size(self.to_glib_none().0, rows, columns, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn set_utf8(&self, utf8: bool) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::vte_pty_set_utf8(self.to_glib_none().0, utf8.to_glib(), &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[cfg(feature = "v0_48")]
    //pub fn spawn_async<'a, T: Into<Option<&'a str>>>(&self, working_directory: T, argv: &[&std::path::Path], envv: &[&std::path::Path], spawn_flags: /*Ignored*/glib::SpawnFlags, child_setup: /*Unknown conversion*//*Unimplemented*/SpawnChildSetupFunc, child_setup_data: /*Unimplemented*/Option<Fundamental: Pointer>, child_setup_data_destroy: /*Unknown conversion*//*Unimplemented*/DestroyNotify, timeout: i32, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: /*Unknown conversion*//*Unimplemented*/AsyncReadyCallback, user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call ffi::vte_pty_spawn_async() }
    //}

    //#[cfg(feature = "v0_48")]
    //pub fn spawn_finish<T: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &T) -> Result</*Ignored*/glib::Pid, Error> {
    //    unsafe { TODO: call ffi::vte_pty_spawn_finish() }
    //}

    pub fn get_property_flags(&self) -> PtyFlags {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "flags".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<u32>().unwrap()))
        }
    }
}
